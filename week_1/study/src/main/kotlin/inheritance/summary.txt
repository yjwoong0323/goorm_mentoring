week_1 : 상속

<kotlin의 상속>
- java, kotlin 모두 추상 클래스 및 인터페이스는 인스턴스화 할 수 없음
- 상위 클래스 상속을 구현할 때 상위 클래스의 생성자를 반드시 호출 해야 함
- override 필수로 붙여야 abstract method 구현 가능
- 상위 클래스의 생성자 또는 초기화 블록에서 open 프로퍼티를 사용하면 예상치 못한 버그가 생길 수 있음
- 추상 프로퍼티가 아니라면, 프로퍼티를 override할 때 open을 붙여줘야 함

- 인터페이스는 default 키워드없이 메서드 구현 가능
- 추상 메서드 생성 가능
- 중복되는 인터페이스 특정할 때 super<Type>.method() 사용
- backing field가 없는 프로퍼티를 인터페이스에 만들 수 있음
 -> backing field : 프로퍼티의 값을 실제로 저장하는 공간
 -> 인터페이스의 프로퍼티는 값을 저장하는게 아니라, 오직 get()만 존재하는 계산 프로퍼티로만 동작함. 인터페이스는 상태를 가지지 않음

<keyword>
- final : override 할 수 없게 함. default.
- open : override 열어 줌
- abstract : 반드시 override 해야 함
- override : 상위 타입을 override 함


class => 강한 결합
interface => 느슨한 결합, 설계 개념, 유틸성 클래스 이런 게 아니라면 인터페이스로 구현을 하는 게 나음
